{"version":3,"sources":["Components/Statistics/Statistics.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Section/Section.jsx","Components/Notification/Notification.jsx","Components/App.js","index.js"],"names":["Statistics","good","bad","neutral","total","positivePercentage","FeedbackOptions","types","onLeaveFeedback","map","btn","style","listStyle","onClick","type","Section","title","children","defaultProps","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","target","innerHTML","Math","floor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNA6BeA,EAxBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,IAAKC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,8BAEI,+BACE,wCAAWJ,KACX,2CAAcE,KACd,uCAAUD,KACV,yCAAYE,KACZ,qDAAwBC,EAAxB,aCQKC,EAnBS,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,gBAE9B,OACI,6BACKD,EAAME,KAAI,SAACC,GAAD,OAEP,oBAAKC,MAAO,CAACC,UAAU,QAAvB,SACI,wBAAQC,QAASL,EAAiBM,KAAK,SAAvC,SAAiDJ,KADhBA,SCN/CK,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MAIPF,EAAQG,aAAe,CAAEF,MAAO,IAEjBD,QCVf,SAASI,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,IAEED,QCCA,SAASE,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOrB,EAAP,KAAasB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOnB,EAAP,KAAgBqB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOpB,EAAP,KAAYuB,EAAZ,KAiBA,SAASC,IACH,OAAQvB,EAAUD,EAAMD,EAY5B,OACE,gCACE,cAAC,EAAD,CAASe,MAAM,wBAAf,SACE,cAAC,EAAD,CAAmBT,MALZ,CAAC,OAAQ,UAAW,OAKQC,gBA7BpB,SAACmB,GAES,SAAvBA,EAAEC,OAAOC,WACRN,GAAQ,SAAAtB,GAAI,OAAGA,EAAM,KAEC,YAAvB0B,EAAEC,OAAOC,WACRL,GAAW,SAAArB,GAAO,OAAGA,EAAS,KAER,QAAvBwB,EAAEC,OAAOC,WACRJ,GAAO,SAAAvB,GAAG,OAAGA,EAAK,UAsBvB,cAAC,EAAD,CAASc,MAAM,aAAf,SAE6B,IAAzBU,IAA6B,cAAC,EAAD,CAAcN,QAAQ,sBAC3C,cAAC,EAAD,CACInB,KAAMA,EACNE,QAASA,EACTD,IAAKA,EACLE,MAAOsB,IACPrB,mBAnBRyB,KAAKC,MAAM9B,EAAOyB,IAAuB,KAAO,WD3BhEP,EAAaD,aAAe,CAC1BE,QAAS,oBEHXY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACb,EAAD,MAEFc,SAASC,eAAe,W","file":"static/js/main.9321cf4e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\n\r\nconst Statistics = ({ good, bad, neutral, total, positivePercentage }) => {\r\n  return (\r\n    <div>\r\n      \r\n        <ul>\r\n          <li>Good: {good}</li>\r\n          <li>Neutral: {neutral}</li>\r\n          <li>Bad: {bad}</li>\r\n          <li>Total: {total}</li>\r\n          <li>Positive feedback: {positivePercentage}%</li>\r\n        </ul>\r\n     \r\n       \r\n      \r\n    </div>\r\n  );\r\n};\r\nStatistics.propTypes = {\r\n    good : PropTypes.number.isRequired,\r\n    neutral : PropTypes.number.isRequired,\r\n    bad : PropTypes.number.isRequired,\r\n    total : PropTypes.number.isRequired,\r\n    positivePercentage : PropTypes.string.isRequired\r\n}\r\nexport default Statistics;\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ types, onLeaveFeedback }) => {\r\n\r\n    return (\r\n        <ul >\r\n            {types.map((btn) => (\r\n\r\n                <li  style={{listStyle:'none'}} key={btn}>\r\n                    <button onClick={onLeaveFeedback} type=\"button\">{btn}</button>\r\n                </li>\r\n\r\n            ))}\r\n        </ul>\r\n    )\r\n\r\n}\r\nFeedbackOptions.propTypes = {\r\n    types: PropTypes.array.isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired\r\n}\r\nexport default FeedbackOptions;\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\nSection.defaultProps = { title: \"\" };\r\n\r\nexport default Section;\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\nexport default Notification;\r\nNotification.defaultProps = {\r\n  message: \"No message value\",\r\n};\r\nNotification.propTypes = { message: PropTypes.string };\r\n","import {useState } from \"react\";\nimport Statistics from \"./Statistics\";\nimport FeedbackOptions from \"./FeedbackOptions\";\nimport Section from \"./Section\";\nimport Notification from \"./Notification\";\n\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  \n\n const onLeaveFeedback = (e) => {\n\n        if (e.target.innerHTML === \"Good\") {\n             setGood(good=> good +1);\n        }\n        if (e.target.innerHTML === \"Neutral\") {\n             setNeutral(neutral=> neutral +1);\n         }\n        if (e.target.innerHTML === \"Bad\") {\n             setBad(bad=> bad +1);\n         }\n    }\n\n  function countTotalFeedback () {\n        return  neutral + bad + good;\n       \n    };\n    function positivePercentage (){\n\n        \n       return   Math.floor(good / countTotalFeedback() * 100) + \"%\";\n         \n    };\n  \n const options = ['Good', 'Neutral', 'Bad'];\n    \n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions   types={options} onLeaveFeedback={onLeaveFeedback} />\n        </Section>\n        <Section title=\"Statistics\">\n          {\n            countTotalFeedback() === 0 ? <Notification message=\"No feedback given\" /> :\n                    <Statistics\n                        good={good}\n                        neutral={neutral}\n                        bad={bad}\n                        total={countTotalFeedback()}\n                        positivePercentage={positivePercentage()}\n                    />\n          }\n        </Section>\n      </div>\n    );\n  \n}\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from './Components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}